openapi: 3.0.3
info:
  title: Hotel & Menu Service API
  version: 1.0.0
  description: Manages hotel discovery, details, and menus.

servers:
  - url: http://localhost:8103
    description: Local
  - url: https://hotel.foodly.example.com
    description: Production

tags:
  - name: Hotels
  - name: Menus

paths:
  /hotels:
    get:
      tags: [Hotels]
      summary: Search hotels
      parameters:
        - in: query
          name: q
          schema: { type: string }
        - in: query
          name: lat
          schema: { type: number, format: double }
        - in: query
          name: lng
          schema: { type: number, format: double }
        - in: query
          name: radius
          schema: { type: integer, default: 5000 }
        - in: query
          name: cuisine
          schema: { type: string }
        - in: query
          name: ratingMin
          schema: { type: number, minimum: 0, maximum: 5 }
        - in: query
          name: sort
          schema:
            type: string
            enum: [distance, rating, popularity]
      responses:
        '200':
          description: Hotels
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/Hotel' }

  /hotels/{hotelId}:
    get:
      tags: [Hotels]
      summary: Get hotel by id
      parameters:
        - in: path
          name: hotelId
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Hotel
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Hotel' }
        '404': { description: Not found }

  /hotels/{hotelId}/menu:
    get:
      tags: [Menus]
      summary: Get menu for a hotel
      parameters:
        - in: path
          name: hotelId
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Menu items
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/MenuItem' }

components:
  schemas:
    GeoPoint:
      type: object
      required: [lat, lng]
      properties:
        lat: { type: number, format: double }
        lng: { type: number, format: double }

    Address:
      type: object
      properties:
        line1: { type: string }
        line2: { type: string }
        city: { type: string }
        state: { type: string }
        postalCode: { type: string }
        country: { type: string }
        location: { $ref: '#/components/schemas/GeoPoint' }

    Hotel:
      type: object
      required: [id, name, rating, isOpen, location]
      properties:
        id: { type: string }
        name: { type: string }
        description: { type: string }
        cuisines:
          type: array
          items: { type: string }
        rating: { type: number, minimum: 0, maximum: 5 }
        ratingCount: { type: integer }
        priceLevel: { type: integer, minimum: 1, maximum: 4 }
        isOpen: { type: boolean }
        location: { $ref: '#/components/schemas/GeoPoint' }
        address: { $ref: '#/components/schemas/Address' }
        etaMinutes: { type: integer }
        imageUrl: { type: string, format: uri }

    MenuItem:
      type: object
      required: [id, hotelId, name, price]
      properties:
        id: { type: string }
        hotelId: { type: string }
        name: { type: string }
        description: { type: string }
        price: { type: number, format: float, minimum: 0 }
        currency: { type: string }
        isVeg: { type: boolean }
        spicyLevel: { type: integer, minimum: 0, maximum: 3 }
        imageUrl: { type: string, format: uri }
        available: { type: boolean }
        options:
          type: array
          items:
            type: object
            properties:
              name: { type: string }
              min: { type: integer, default: 0 }
              max: { type: integer, default: 1 }
              options:
                type: array
                items:
                  type: object
                  properties:
                    id: { type: string }
                    label: { type: string }
                    priceDelta: { type: number, format: float, default: 0 }
